name: build-dev

on:
  push:
    branches: 
      - 'dev'
    tags: 
      - '*'
  pull_request:
    branches: 
      - 'dev'

env:
  DOCKERHUB_SLUG: imoize/devel


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2.1.0

      - name: Setup Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.4.1

      - name: Login to docker.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.DOCKERHUB_SLUG }}
          labels: |
            maintainer=Imoize
            org.opencontainers.image.vendor=Imoize
            org.opencontainers.image.title=alpine-s6-dev
            org.opencontainers.image.description=Docker Alpine Linux with s6 overlay
          tags: alpine-s6-dev

      - name: Build and push Docker image
        if: ${{ github.event_name != 'pull_request' }}
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
      
      - name: Docker Hub Description
        if: ${{ github.event_name != 'pull_request' }}
        uses: peter-evans/dockerhub-description@v3.1.2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKERHUB_SLUG }}
          short-description: ${{ github.event.repository.description }}

      - name: Check pull
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ env.DOCKERHUB_SLUG }}:${{ steps.meta.outputs.tags }}
          docker image inspect ${{ env.DOCKERHUB_SLUG }}:${{ steps.meta.outputs.tags }}